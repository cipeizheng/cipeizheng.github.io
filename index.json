[{"content":"3440. 重新安排会议得到最多空余时间 II 给你一个整数 eventTime 表示一个活动的总时长，这个活动开始于 t = 0 ，结束于 t = eventTime 。\n同时给你两个长度为 n 的整数数组 startTime 和 endTime 。它们表示这次活动中 n 个时间没有重叠的会议，其中第 i 个会议的时间为 [startTime[i], endTime[i]] 。\n你可以重新安排 至多 一个会议，安排的规则是将会议时间平移，且保持原来的 会议时长 ，你的目的是移动会议后 最大化 相邻两个会议之间的最长连续空余时间。\n请你返回重新安排会议以后，可以得到的最大空余时间。\n注意，会议 不能 安排到整个活动的时间以外，且会议之间需要保持互不重叠。\n注意：重新安排会议以后，会议之间的顺序可以发生改变。\n问题与思考 在阅读官方题解后，我一直有一段代码无法理解：\nfor (int i = 0, t1 = 0, t2 = 0; i \u0026lt; n; i++) { if (endTime[i] - startTime[i] \u0026lt;= t1) { q[i] = true; } t1 = Math.max(t1, startTime[i] - (i == 0 ? 0 : endTime[i - 1])); if (endTime[n - i - 1] - startTime[n - i - 1] \u0026lt;= t2) { q[n - i - 1] = true; } t2 = Math.max(t2, (i == 0 ? eventTime : startTime[n - i]) - endTime[n - i - 1]); } 根据题解描述：\nq[i] 记录会议 i 是否适用于第一种情况，首先从左到右遍历会议，同时记录当前遍历到的会议 i 左侧非相邻的空余时间段的最大时长 t1，如果 t1 ≥ endTime[i] - startTime[i]，那么说明会议 i 左侧有满足第一种情况的空余时间段，记 q[i] = true。同样地，我们从右到左遍历会议，记下会议 i 右侧是否有满足第一种情况的空余时间段。\n但是为什么需要遍历两次？第一次从左到右，第二次从右到左？我认为只需要一次遍历就可以了。因为 i 的取值是从 0 到 n-1，而 n-i-1 的取值是从 n-1 到 0，这两次遍历实际上是对同一组会议进行处理，相当于是把所有的空余时间计算了两遍。\n然而我的理解是错误的。实际上，这两次遍历是必要的。因为当i遍历到某个会议时，t1 只记录到了当前会议左侧的空余时间，max函数也只考虑了当前会议左侧的空余时间。\n所以在Leetcode的评论区，有人说这个思路和接雨水的思路类似。\n接雨水的思路也是从左到右和从右到左各遍历一次，分别计算左侧和右侧的最大高度，然后再计算每个位置的水量。\n虽然大家可能觉得困扰我的问题很简单，但是花了一个下午想明白的我肯定要把它写下来。如果以后还有思考，我也会更新这篇文章。\n","permalink":"https://cipeizheng.github.io/posts/reschedule-meetings/","summary":"\u003ch2 id=\"3440-重新安排会议得到最多空余时间-ii\"\u003e3440. 重新安排会议得到最多空余时间 II\u003c/h2\u003e\n\u003cp\u003e给你一个整数 \u003ccode\u003eeventTime\u003c/code\u003e 表示一个活动的总时长，这个活动开始于 \u003ccode\u003et = 0\u003c/code\u003e ，结束于 \u003ccode\u003et = eventTime\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e同时给你两个长度为 \u003ccode\u003en\u003c/code\u003e 的整数数组 \u003ccode\u003estartTime\u003c/code\u003e 和 \u003ccode\u003eendTime\u003c/code\u003e 。它们表示这次活动中 \u003ccode\u003en\u003c/code\u003e 个时间没有重叠的会议，其中第 \u003ccode\u003ei\u003c/code\u003e 个会议的时间为 \u003ccode\u003e[startTime[i], endTime[i]]\u003c/code\u003e 。\u003c/p\u003e\n\u003cp\u003e你可以重新安排 \u003cstrong\u003e至多\u003c/strong\u003e 一个会议，安排的规则是将会议时间平移，且保持原来的 \u003cstrong\u003e会议时长\u003c/strong\u003e ，你的目的是移动会议后 \u003cstrong\u003e最大化\u003c/strong\u003e 相邻两个会议之间的最长连续空余时间。\u003c/p\u003e\n\u003cp\u003e请你返回重新安排会议以后，可以得到的\u003cstrong\u003e最大\u003c/strong\u003e空余时间。\u003c/p\u003e\n\u003cp\u003e注意，会议 \u003cstrong\u003e不能\u003c/strong\u003e 安排到整个活动的时间以外，且会议之间需要保持互不重叠。\u003c/p\u003e\n\u003cp\u003e注意：重新安排会议以后，会议之间的顺序可以发生改变。\u003c/p\u003e\n\u003ch2 id=\"问题与思考\"\u003e问题与思考\u003c/h2\u003e\n\u003cp\u003e在阅读官方题解后，我一直有一段代码无法理解：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003et1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003et2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eendTime\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estartTime\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003et1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003et1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estartTime\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eendTime\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eendTime\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estartTime\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003et2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eq\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003et2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e0\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eeventTime\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estartTime\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eendTime\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e根据题解描述：\u003c/p\u003e","title":"Leetcode 3440 的思考"},{"content":"Java泛型中的extends与super Java在泛型中引入extends和super通配符，其核心目的是为了在保证类型安全的前提下，增加泛型代码的灵活性，解决泛型类型固有的“不可变性”（Invariance）所带来的限制。而**PECS原则（Producer Extends, Consumer Super）**则是对如何正确使用这两种通配符的高度概括和实用总结。\n在Java中，泛型类型默认是不可变的。这意味着，即使String是Object的子类，List\u0026lt;String\u0026gt;也不是List\u0026lt;Object\u0026gt;的子类。\n让我们来看一个的例子：\n// 假设我们有一个打印Object列表的方法 public void printList(List\u0026lt;Object\u0026gt; list) { for (Object obj : list) { System.out.println(obj); } } // 现在我们有一个String列表 List\u0026lt;String\u0026gt; strList = new ArrayList\u0026lt;\u0026gt;(); strList.add(\u0026#34;Hello\u0026#34;); strList.add(\u0026#34;World\u0026#34;); // 下面的调用将会导致编译错误！ // printList(strList); // 编译不通过 这个编译错误可能会让初学者感到困惑。编译器之所以阻止这种行为，是为了防止潜在的类型安全问题。如果printList(strList)是合法的，那么在printList方法内部，我们就可以向这个列表中添加任何Object类型的对象，例如一个Integer：\npublic void printList(List\u0026lt;Object\u0026gt; list) { list.add(123); // 合法，因为123是Object的子类 for (Object obj : list) { System.out.println(obj); } } 这样一来，当我们回到调用方，尝试从原来的strList中取出一个元素时，就可能会遇到ClassCastException，因为我们期望得到一个String，但实际上取出的可能是一个Integer。例如下面的代码：\nList\u0026lt;String\u0026gt; strList = new ArrayList\u0026lt;\u0026gt;(); strList.add(\u0026#34;Hello\u0026#34;); strList.add(\u0026#34;World\u0026#34;); printList(strList); // 假设这行代码编译通过了，那么strList的内容是[\u0026#34;Hello\u0026#34;, \u0026#34;World\u0026#34;, 123] String s = strList.get(3); // 这里会抛出ClassCastException 于是，Java的泛型设计在编译期就杜绝了这种风险，禁止将List\u0026lt;String\u0026gt;传递给List\u0026lt;Object\u0026gt;类型的方法。\n然而，这种严格的不可变性也带来了灵活性上的问题。在很多场景下，我们确实希望能够以一种安全的方式处理相关类型的泛型集合。例如，一个方法可能只需要从一个集合中读取元素（作为生产者），或者只需要向一个集合中添加元素（作为消费者）。这时，extends和super通配符就应运而生了。\n解决方案：extends和super通配符 为了解决上述的灵活性问题，Java引入了有界通配符（Bounded Wildcards），即? extends T和? super T。\n1. ? extends T (上界通配符) ? extends T表示“任何T的子类型或T本身”。它用于放宽对“生产者”的限制。当我们的方法需要从一个泛型集合中读取数据时，使用extends。\n回到之前的例子，如果我们只是想打印列表中的元素，而不会修改它，我们可以将方法签名修改为：\npublic void printList(List\u0026lt;? extends Object\u0026gt; list) { for (Object obj : list) { System.out.println(obj); } } List\u0026lt;String\u0026gt; strList = new ArrayList\u0026lt;\u0026gt;(); strList.add(\u0026#34;Hello\u0026#34;); // ... printList(strList); // 现在编译通过了！ 通过使用List\u0026lt;? extends Object\u0026gt;，我们告诉编译器，这个方法接受一个列表，其元素类型是Object的任何子类型。因为我们知道列表中的任何元素至少都是一个Object，所以从中读取元素并将其作为Object来处理是类型安全的。\nextends的限制：使用? extends T的集合，我们不能向其中添加任何元素（除了null），因为编译器无法确定?所代表的具体是哪个T的子类型。看一个例子：\nList\u0026lt;? extends Object\u0026gt; list = new ArrayList\u0026lt;String\u0026gt;(); // 下面这些都会编译失败！ // list.add(\u0026#34;hello\u0026#34;); // list.add(123); list.add(null); // 这是唯一允许的添加操作 Object obj = list.get(0); // 这是安全的 2. ? super T (下界通配符) ? super T表示“任何T的超类型或T本身”。它用于放宽对“消费者”的限制。当我们的方法需要向一个泛型集合中添加数据时，使用super。\n假设我们有一个方法，需要将一个String对象添加到一个列表中：\npublic void addString(List\u0026lt;? super String\u0026gt; list) { list.add(\u0026#34;new String\u0026#34;); } List\u0026lt;Object\u0026gt; objList = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;String\u0026gt; strList = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;CharSequence\u0026gt; charSeqList = new ArrayList\u0026lt;\u0026gt;(); addString(objList); // 编译通过 addString(strList); // 编译通过 addString(charSeqList); // 编译通过 这个方法可以接受List\u0026lt;String\u0026gt;、List\u0026lt;Object\u0026gt;或List\u0026lt;CharSequence\u0026gt;（因为CharSequence是String的超接口）。这是因为无论列表的实际类型是String、Object还是CharSequence，向其中添加一个String对象都是类型安全的。\nsuper的限制：使用? super T的集合，当我们从中读取元素时，我们只能保证得到的是一个Object类型的对象，因为编译器无法确定具体的超类型是什么。让我们看一个例子：\nList\u0026lt;? super String\u0026gt; list = new ArrayList\u0026lt;String\u0026gt;(); Object obj = list.get(0); // 只能保证是Object类型 // String str = list.get(0); // 编译错误，不能直接赋值给String 上面所说的限制都是编译器在编译期进行的类型检查，目的是为了确保类型安全，防止运行时出现ClassCastException。\n编译器做类型检查时，它只关心变量的声明类型（List\u0026lt;? super String\u0026gt;），而不会去关心它在运行时实际指向的类型（new ArrayList\u0026lt;String\u0026gt;()）。\n当编译器看到 List\u0026lt;? super String\u0026gt; list 这行代码时，它脑子里想的是：\n“OK，list 这个变量引用了一个列表。我不知道这个列表的确切类型，但我知道它的元素类型至少是 String 的一个父类。它可能是 List\u0026lt;String\u0026gt;，也可能是 List\u0026lt;CharSequence\u0026gt;，甚至可能是 List\u0026lt;Object\u0026gt;。我必须保证对这个 list 的任何操作，在这三种（以及其他任何可能的）情况下都是类型安全的。”\n需要注意的是，这些限制并不影响变量在运行时实际指向的对象类型。例如：\nList\u0026lt;? super String\u0026gt; list = new ArrayList\u0026lt;String\u0026gt;(); list.add(\u0026#34;Hello\u0026#34;); // 允许，因为我们知道list至少可以接受String类型 String s = (String) list.get(0); // 需要强制类型转换 PECS原则 PECS是**\u0026ldquo;Producer Extends, Consumer Super\u0026rdquo;**的缩写，这个原则由著名的Java专家Joshua Bloch在他的著作《Effective Java》中提出，它精辟地总结了何时使用extends和super：\nProducer Extends (生产者使用extends): 如果我们需要一个泛型集合来产出（提供、读取）数据，那么使用? extends T。这意味着我们将从集合中获取T类型的对象。\n例子: Collections.copy(List\u0026lt;? extends T\u0026gt; src, List\u0026lt;? super T\u0026gt; dest)中的src。src是数据的来源（生产者），所以使用extends。 Consumer Super (消费者使用super): 如果我们需要一个泛型集合来消费（接收、写入）数据，那么使用? super T。这意味着我们将向集合中添加T类型的对象。\n例子: Collections.copy(List\u0026lt;? extends T\u0026gt; src, List\u0026lt;? super T\u0026gt; dest)中的dest。dest是数据的目的地（消费者），所以使用super。 既是生产者又是消费者: 如果一个集合既需要读取又需要写入，那么通常不应该使用任何通配符，直接使用确定的泛型类型，如List\u0026lt;T\u0026gt;。\n总而言之，Java泛型中的extends和super通配符是为了在泛型不可变性的严格类型安全和实际编程所需的灵活性之间找到一个平衡点。而PECS原则为开发者在面对复杂的泛型继承结构时，提供了一个简单、清晰且行之有效的指导方针。\n3. 无界通配符? 虽然我认为?是一个有点奇怪的通配符，但它也有特殊的作用。假设我们想让一个方法，它接受一个任意的List，并打印它的大小：\n尝试1：不使用泛型（原始类型）：\n// 警告: Raw use of parameterized class \u0026#39;List\u0026#39; public void printListSize(List list) { System.out.println(list.size()); } 这在语法上是允许的，但编译器会给我们一个警告。这是因为使用原始类型（raw type）完全绕过了Java的泛型类型检查系统。这意味着在这个 list 中可以添加任何类型的对象，很容易在程序的其他地方引发 ClassCastException。这是一种不推荐的“退回”到Java 5之前的编码方式。\n尝试2：使用 List\u0026lt;Object\u0026gt;：\npublic void printListSize(List\u0026lt;Object\u0026gt; list) { System.out.println(list.size()); } 这个方法是类型安全的，它只接受元素是 Object 类型的列表。但它存在一个巨大的灵活性问题。正如我们之前讨论的，即使 String 是 Object 的子类，List\u0026lt;String\u0026gt; 也不是 List\u0026lt;Object\u0026gt; 的子类。\n因此，下面的调用将会编译失败：\nList\u0026lt;String\u0026gt; stringList = new ArrayList\u0026lt;\u0026gt;(); printListSize(stringList); // 编译错误！ Incompatible types. 这时候就要轮到 List\u0026lt;?\u0026gt;出场了，它表达了这样的意图：“我接受一个列表，列表里元素的具体类型我不知道，也不关心。我只会调用那些不依赖于具体类型的方法。”：\npublic void printListSize(List\u0026lt;?\u0026gt; list) { System.out.println(list.size()); } 现在，下面的调用都是合法的：\nList\u0026lt;String\u0026gt; stringList = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; integerList = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Object\u0026gt; objectList = new ArrayList\u0026lt;\u0026gt;(); printListSize(stringList); // OK printListSize(integerList); // OK printListSize(objectList); // OK 总结 在我看来，我们想让一个方法能让调用方传入更多的类集合的需求（这个需求是由Java的向上转型安全引起的，而向下转型需要类型检查），引入了通配符，就不用创建很多重载的方法了。\n总而言之，我们：\n想让一个只从集合中读取数据的方法，能接受\u0026quot;按道理来说\u0026quot;更多类型的集合，就用? extends T，因为本来读取T的子类型到T是就是安全的，这就是PE；\n想让一个只向集合中写入数据的方法，能接受更多类型的集合，就用? super T，因为本来写入T到T的父类型也是安全的，这就是CS；\n如果一个方法既不读也不写，只是调用一些不依赖于具体类型的方法（比如size()），那就用无界通配符?。\n上面那句话我用AI给我润色了一下，感觉还不错：\n在Java泛型中，引入通配符是为了在保证类型安全的前提下，极大地提升API的灵活性。其使用原则可以高度概括为以下三点：\n生产者原则 (Producer Extends)：? extends T\n场景：当你的方法需要从一个泛型集合中读取数据（即该集合是数据的生产者），并且希望它能兼容更多类型时。 用法：在参数类型中使用 ? extends T。 效果：这使得方法能够接受 T 及其任何子类型的集合作为输入。例如，一个设计用来处理 List\u0026lt;Number\u0026gt; 的方法，通过此方式也能无缝接收 List\u0026lt;Integer\u0026gt; 或 List\u0026lt;Double\u0026gt;，因为从中读取到的任何元素都可以被安全地视为 Number。 消费者原则 (Consumer Super)：? super T\n场景：当你的方法需要向一个泛型集合中写入数据（即该集合是数据的消费者），并且希望它能兼容更多类型时。 用法：在参数类型中使用 ? super T。 效果：这使得方法能够向 T 及其任何父类型的集合写入数据。例如，一个需要向列表添加 String 对象的方法，通过此方式不仅能操作 List\u0026lt;String\u0026gt;，还能安全地操作 List\u0026lt;CharSequence\u0026gt; 或 List\u0026lt;Object\u0026gt;。 类型无关原则 (Unbounded Wildcard)：?\n场景：当方法对集合的操作完全不依赖于其内部元素的具体类型时。 用法：使用无界通配符 ?。 效果：这提供了最大程度的灵活性，允许方法接收任意类型的泛型集合。最典型的例子是调用 size()、isEmpty() 或 clear() 等方法，这些操作的结果与列表究竟是 List\u0026lt;String\u0026gt;还是 List\u0026lt;Integer\u0026gt; 毫无关系。 一言以蔽之：这套通配符体系的设计目标，就是在Java泛型严格的**类型安全（Type Safety）和API的通用性与灵活性（Flexibility）**之间，找到了一个堪称完美的平衡点。\nAI辅助创作声明 本文部分内容由Google Gemini 2.5 Pro辅助生成，经过作者审核和修改。\n","permalink":"https://cipeizheng.github.io/posts/pecs/","summary":"\u003ch2 id=\"java泛型中的extends与super\"\u003eJava泛型中的\u003ccode\u003eextends\u003c/code\u003e与\u003ccode\u003esuper\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003eJava在泛型中引入\u003ccode\u003eextends\u003c/code\u003e和\u003ccode\u003esuper\u003c/code\u003e通配符，其核心目的是为了在保证类型安全的前提下，增加泛型代码的灵活性，解决泛型类型固有的“不可变性”（Invariance）所带来的限制。而**PECS原则（Producer Extends, Consumer Super）**则是对如何正确使用这两种通配符的高度概括和实用总结。\u003c/p\u003e\n\u003cp\u003e在Java中，泛型类型默认是不可变的。这意味着，即使\u003ccode\u003eString\u003c/code\u003e是\u003ccode\u003eObject\u003c/code\u003e的子类，\u003ccode\u003eList\u0026lt;String\u0026gt;\u003c/code\u003e也\u003cstrong\u003e不是\u003c/strong\u003e\u003ccode\u003eList\u0026lt;Object\u0026gt;\u003c/code\u003e的子类。\u003c/p\u003e\n\u003cp\u003e让我们来看一个的例子：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 假设我们有一个打印Object列表的方法\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eprintList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 现在我们有一个String列表\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estrList\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eArrayList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003estrList\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003estrList\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;World\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 下面的调用将会导致编译错误！\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// printList(strList); // 编译不通过\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这个编译错误可能会让初学者感到困惑。编译器之所以阻止这种行为，是为了防止潜在的类型安全问题。如果\u003ccode\u003eprintList(strList)\u003c/code\u003e是合法的，那么在\u003ccode\u003eprintList\u003c/code\u003e方法内部，我们就可以向这个列表中添加任何\u003ccode\u003eObject\u003c/code\u003e类型的对象，例如一个\u003ccode\u003eInteger\u003c/code\u003e：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003eprintList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e123\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 合法，因为123是Object的子类\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eObject\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eout\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eprintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这样一来，当我们回到调用方，尝试从原来的\u003ccode\u003estrList\u003c/code\u003e中取出一个元素时，就可能会遇到\u003ccode\u003eClassCastException\u003c/code\u003e，因为我们期望得到一个\u003ccode\u003eString\u003c/code\u003e，但实际上取出的可能是一个\u003ccode\u003eInteger\u003c/code\u003e。例如下面的代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estrList\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eArrayList\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003estrList\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003estrList\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;World\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eprintList\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estrList\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 假设这行代码编译通过了，那么strList的内容是[\u0026#34;Hello\u0026#34;, \u0026#34;World\u0026#34;, 123]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003estrList\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 这里会抛出ClassCastException\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e于是，Java的泛型设计在编译期就杜绝了这种风险，禁止将\u003ccode\u003eList\u0026lt;String\u0026gt;\u003c/code\u003e传递给\u003ccode\u003eList\u0026lt;Object\u0026gt;\u003c/code\u003e类型的方法。\u003c/p\u003e","title":"Java 泛型的通配符与PECS原则"},{"content":"1. 开发缘由 本次是我第一次接触开发板嵌入式开发，原因是选修的嵌入式开发的课程要求在期末的时候在龙芯 2K500 的实验箱上部署一个DEMO。本文主要记录了我在部署开发环境时遇到的小坑，回头看其实只是因为不熟悉交叉编译和内核开发闹出的一些小笑话，不过也很有纪念意义，于是记录下来。\n接下来简单介绍一下龙芯 2K500:\n龙芯 2K500 芯片是一款基于 LoongArch64 架构的处理器，专为嵌入式应用设计。该 CPU 采用单核设计，拥有单个 LA264 处理器核心，主频范围在 500MHz 到800MHz 之间。CPU 缓存配置方面拥有 32KB 一级指令缓存、32KB 一级数据缓存、512KB 通用二级缓存。CPU 中内置 2D GPU 图形核心，支持 DVO 显示接口。\n在系统软件支持上，龙芯 2K500 运行 U-Boot 2022 和 Linux 5.10 内核，并兼容 Buildroot 2021 和 OpenHarmony 3.2 文件系统。\n从官网上来看，这款芯片主要是用于网关、物联网数据终端等设备。确实是一款嵌入式芯片。\n2. 踩坑记录 2.1 缺失内核源码 刚上手时，我甚至不知道交叉编译驱动还需要内核源码，在我简单的设置好 Loongarch 的 gcc 编译器以后，我就开始直接编译驱动了。在编译内核模块的目录里，我把Makefile 中的KDIR的含义理解为我当前要编译的驱动源码所在的的路径。\nobj-m :=ch422g.o KDIR :=/home/chenzheng/loongarch/mod all: make -C $(KDIR) M=$(PWD) modules clean: make -C $(KDIR) M=$(PWD) modules clean 显而易见，这是错误的，我应该把KDIR指向板子上的内核源码路径。所以我需要下载板子上的内核源码，然后交叉编译驱动。\n接下来我重新构建了我的工作目录，如下：\nloongarch ├── linux-5.10-2k500 ├── mod │ ├── ch422g.c │ ├── ch422g.h │ └── Makefile ├── test │ ├── ch422g_test.c │ └── Makefile └── setEnv.sh 并且修改了Makefile，如下：\nobj-m :=ch422g.o KDIR :=/home/chenzheng/loongarch/linux-5.10-2k500 all: make -C $(KDIR) M=$(PWD) modules clean: make -C $(KDIR) M=$(PWD) modules clean 2.2 编译驱动缺失Module.symvers 我在内核源码目录下，执行了 make loongson_2k500_defconfig 得到了.config，并执行了 make prepare 和make modules_prepare，但是我在编译模块时出现了警告：\nWARNING: Symbol version dump \u0026#34;Module.symvers\u0026#34; is missing.Modules may not have dependencies or modversions. MODPOST /home/chenzheng/loongarch/mod/Module.symvers WARNING: modpost: Symbol info of vmlinux is missing. Unresolved symbol check will be entirely skipped. CC [M] /home/chenzheng/loongarch/mod/ch422g.mod.o LD [M] /home/chenzheng/loongarch/mod/ch422g.ko make[1]: Leaving directory \u0026#39;/home/chenzheng/loongarch/kernel/linux-5.10-2k500-cbd-src\u0026#39; 接下来我执行了 make 命令，因为编译一整个内核，应该能解决 Module.symvers 缺失的问题，但是不知道为何没有解决。\n最终我参考了: How can I prepare a Linux source tree so an external module can be compiled against it? - StackOverflow\n得出了解决方案：\n# Prepare kernel source cd \u0026#39;/path/to/kernel/source\u0026#39; make localmodconfig # 这里就是我执行的 make loongson_2k500_defconfig make -j modules_prepare # 可以指定线程数目 如 -j8 # May also be needed if you need module versioning, # in which case modules_prepare is not enough make -j modules # 这一步必须要有，否则会出现 Module.symvers 缺失的问题 # Build your module against it cd \u0026#39;/path/to/your/module/source\u0026#39; make -j -C \u0026#39;/path/to/kernel/source\u0026#39; M=\u0026#34;$(pwd)\u0026#34; modules # Clean things up (will delete your .ko module so grab it and # move it somewhere else first) make -j -C \u0026#39;/path/to/kernel/source\u0026#39; M=\u0026#34;$(pwd)\u0026#34; clean cd \u0026#39;/path/to/kernel/source\u0026#39; make distclean 这次编译并没有出现 WARNING: modpost: Symbol info of vmlinux is missing. Unresolved symbol check will be entirely skipped. 的警告。\n2.3 编译的模块和板子上的内核版本不一致 但是我发现我编译的模块并不能在板子上insmod，报错的消息如下：\n[root@LS-GD usb] # insmod ch422g.ko [ 7701.520577] ch422g: disagrees about version of symbol module_layout insmod: ERROR: could not insert module ch422g.ko: Invalid module format 这个问题是由于我编译的模块和板子上的内核版本不一致导致的。在我拿到手以后，板子上就已经安装好了内核，而且其版本也也是5.10。但是问题比想象的要复杂，因为就算内核版本一致，只要板子上的内核和我手里的源码有一些地方不一样，也会出现这个符号对不上的问题。\n而我的水平还没能理解到底是哪里不一样会导致这样的问题。\n随后，我构思了两种解决方案：\n一是在板子上安装完全和编译环境一致的内核。\n二是用手头的源码重新编译内核。\n考虑到资源库中已经分别给出了内核源码和内核二进制文件，我可以使用二进制文件直接进行安装。\n首先，我手头的源码和二进制有两版，需要梳理下。如果两套开发工具链中给出的内核源码和二进制文件都不匹配，那么我就需要重新编译内核。\n“-” 前面的是网盘用户名，后面的是密码。 这俩资源都是从龙芯2K500开发板技术资料拿的\nmx****005 - 5yob 给出的源码名字是linux-5.10-master-src-a7f3115-build.20240617170629.tar.gz，内核二进制名字是linux-5.10-2k500-mini-dp-134e7872d-build.20240624201016.tar.gz。\n神*止水 - p1gi 给出的内核源码名字是linux-5.10-2k500-src-ce8ee9b-build.20221011141048.tar.gz，内核二进制名字是linux-5.10-2k500-mini-dp-ce8ee9b62-build.20221011081008.zip\nmx****005 中给出的内核源代码，执行make -j modules，会出现如下错误：\nmake[2]: *** No rule to make target \u0026#39;arch/loongarch/boot/dts/loongson/ls2k500_hl_mb.dtb\u0026#39;, needed by \u0026#39;__build\u0026#39;. Stop. scripts/Makefile.build:496: recipe for target \u0026#39;arch/loongarch/boot/dts/loongson\u0026#39; failed make[1]: *** [arch/loongarch/boot/dts/loongson] Error 2 Makefile:1805: recipe for target \u0026#39;arch/loongarch/boot/dts\u0026#39; failed make: *** [arch/loongarch/boot/dts] Error 2 make: *** Waiting for unfinished jobs.... 我经过一番学习后，认为是在arch/loongarch/boot/dts/loongson/目录下缺少了ls2k500_hl_mb.dts文件，所以我需要在这个目录下添加这个文件。\n同时我查看了arch/loongarch/boot/dts/loongson/Makefile，结果非常的Amazing：\ndtb-$(CONFIG_LOONGSON_2K500) += ls2k500_hl_mb.dtb ls2k500_mini_dp.dtb ls2k500_dayu400_mb.dtb ls2k500_modi_hct.dtb ls2k500_zhengtai_pcs1800_v10.dtb \\ ls2k500_jiaoqian_v10.dtb ls2k500_zjjz.dtb 这个Makefile表示了，如果内核配置中开启了CONFIG_LOONGSON_2K500，那么就会编译这些dtb文件。那也就意味着arch/loongarch/boot/dts/loongson/下应该有这些文件的源码（dts）。\n但是，我看了一下，里面只有ls2k500_mini_dp.dtb 和 ls2k500_dayu400_mb.dtb, 真是令人费解。\n也别想从另一版源码中拷贝过来，因为另一版里面只有ls2k500_mini_dp.dtb 和 ls2k500_hl_mb.dtb。\n那么，我就选择使用神*止水-p1gi给出的源码和二进制。\n然而，我发现神*止水-p1gi给出的uImage安装后，板子启动会出现错误\n[ 2.155683] stmmaceth 1f020000.ethernet: IRQ eth_wake_irq not found [ 2.161955] stmmaceth 1f020000.ethernet: IRQ eth_lpi not found [ 2.167905] stmmaceth 1f020000.ethernet: Cannot get CSR clock [ 2.173655] stmmaceth 1f020000.ethernet: PTP uses main clock [ 2.179307] stmmaceth 1f020000.ethernet: no reset control found [ 2.185643] stmmaceth 1f020000.ethernet: User ID: 0x11, Synopsys ID: 0x37 [ 2.192459] stmmaceth 1f020000.ethernet: DWMAC1000 [ 2.197332] stmmaceth 1f020000.ethernet: DMA HW capability register supported [ 2.204446] stmmaceth 1f020000.ethernet: RX Checksum Offload Engine supported [ 2.211576] stmmaceth 1f020000.ethernet: COE Type 2 [ 2.216442] stmmaceth 1f020000.ethernet: TX Checksum insertion supported [ 2.223121] stmmaceth 1f020000.ethernet: Wake-Up On Lan supported [ 2.229303] stmmaceth 1f020000.ethernet: Enhanced/Alternate descriptors [ 2.235905] stmmaceth 1f020000.ethernet: Enabled extended descriptors [ 2.242328] stmmaceth 1f020000.ethernet: Ring mode enabled [ 2.247830] stmmaceth 1f020000.ethernet: Enable RX Mitigation via HW Watchdog Timer [ 2.255470] stmmaceth 1f020000.ethernet: device MAC address 64:48:48:48:48:60 [ 2.271418] libphy: stmmac: probed [ 2.274835] Marvell 88E1510 stmmac-0:00: attached PHY driver [Marvell 88E1510] (mii_bus:phy_addr=stmmac-0:00, irq=POLL) [ 2.287255] stmmaceth 1f030000.ethernet: IRQ eth_wake_irq not found [ 2.293552] stmmaceth 1f030000.ethernet: IRQ eth_lpi not found [ 2.299534] stmmaceth 1f030000.ethernet: Cannot get CSR clock [ 2.305292] stmmaceth 1f030000.ethernet: PTP uses main clock [ 2.310944] stmmaceth 1f030000.ethernet: no reset control found 现在果然只能重新编译内核了吗？\n而且必须是用神*止水给出的源码，因为mx****005给出的源码存在设备树文件缺失的问题。\n2.4 裁剪内核源码 说实话我还太指望用神*止水给出的源码来编译一个能用在板子上的内核，因为有很大的可能编译出来的内核和他直接给出的内核是一样的，换句话说，很有可能上面说的中断问题。\n抱着试一试的心态，我从arch/loongarch/boot/dts/loongson/Makefile 里删掉了没有的设备树文件，最后变成了以下的样子。\n# SPDX-License-Identifier: GPL-2.0 dtb-$(CONFIG_LOONGSON64_GENERIC) += loongson3_ls7a.dtb dtb-$(CONFIG_LOONGSON_2K500) += ls2k500_hl_mb.dtb ls2k500_mini_dp.dtb dtb-$(CONFIG_LOONGSON_2K1000) = ls2k1000_jl_mb.dtb ls2k1000_jl_mb_mu.dtb ls2k1000_jl_mb_nodvo.dtb \\ ls2k1000_dp.dtb ls2k1000_dp_i2s.dtb ksec_hac_mb.dtb gbkpdm0_v10.dtb gbkpdm0_litong.dtb \\ ls2k1000_cl_mb.dtb ls2k1000_dp_test.dtb ls2k1000_dp_factory.dtb dtb-$(CONFIG_LOONGSON_2P500) += ls2p500_evb.dtb ls2p500_rsj_mb_v10.dtb dtb-$(CONFIG_LOONGSON_2K300) += ls2k300_mini_dp.dtb ls2k300_pai.dtb obj-y += $(patsubst %.dtb, %.dtb.o, $(dtb-y)) 然后我执行了`make -j modules， 期间出现了错误:\nloongarch64-linux-gnu-ld: arch/loongarch/loongson64/init.o: in function `.L23\u0026#39;: init.c:(.init.text+0x24c): undefined reference to `__dtb_ls2k500_dayu400_mb_begin\u0026#39; loongarch64-linux-gnu-ld: init.c:(.init.text+0x250): undefined reference to `__dtb_ls2k500_dayu400_mb_begin\u0026#39; loongarch64-linux-gnu-ld: init.c:(.init.text+0x250): undefined reference to `__dtb_ls2k500_dayu400_mb_begin\u0026#39; Makefile:1170: recipe for target \u0026#39;vmlinux\u0026#39; failed make: *** [vmlinux] Error 1 这个问题是由于我在Makefile中删除了ls2k500_dayu400_mb.dtb，但是在内核源码中的一些文件中引用了这个设备树文件，所以我需要在内核源码中删除这些引用。\n于是我把下面的文件修改了\narch/loongarch/include/asm/mach-loongson64/boot_param.h arch/loongarch/loongson64/init.c // arch/loongarch/include/asm/mach-loongson64/boot_param.h extern u32 __dtb_ls2k500_mini_dp_begin[]; //extern u32 __dtb_ls2k500_dayu400_mb_begin[]; // Line 109 extern u32 __dtb_ls2k1000_jl_mb_begin[]; // arch/loongarch/loongson64/init.c if (!strncmp(b_info.board_name, \u0026#34;LS2K500-MINI-DP\u0026#34;, 15)) fdt = \u0026amp;__dtb_ls2k500_mini_dp_begin; // else if (!strncmp(b_info.board_name, \u0026#34;LS2K500-DAYU400-MB\u0026#34;, 17)) //Line 240 // fdt = \u0026amp;__dtb_ls2k500_dayu400_mb_begin; else fdt = \u0026amp;__dtb_ls2k500_mini_dp_begin; for (i = 0; i \u0026lt; NR_CPUS; ++i) if (check_cpu_full_name_invaild(i)) __cpu_full_name[i] = cpu_ls2k500_name; 然后我再次执行make -j modules，编译成功。\n在这样一个准备好的内核源码下，我最终尝试了编译驱动（说实话我有赌的成分在，因为一旦不成功就得去编译神*止水的源码了）。\n那么最终结果是什么呢？\n[root@LS-GD usb]# insmod ch422g.ko [ 7198.305519] ch422g_init===\u0026gt;GPSET0_V:120a4480,---GPIN0_V:120ac478,---GPCTR0_V:120b4470,---GPMUX0_V120bc4d4 [ 7198.326928] ch422g_init1===\u0026gt;GPFSEL_read:6000,---GPFCTR_read:ffff9fff,---GPFMUX_read:10000000 [root@LS-GD usb]# ./test_ch422g test: fd=3 Test program is running, enter \u0026#34;help\u0026#34; for help. Countdown thread is running 说明这次编译好的内核模块和内核的版本对上了，那么我的开发环境终于算是搭建完毕了。\n3. 最终开发成果 最后我在实验箱上实现了一个闹钟程序，算是非常简单的应用了，只用到了数码管和蜂鸣器两个设备。不过这样的一个从无到有的开发过程还是非常有趣的。\n","permalink":"https://cipeizheng.github.io/posts/first-loongarch/","summary":"\u003ch2 id=\"1-开发缘由\"\u003e1. 开发缘由\u003c/h2\u003e\n\u003cp\u003e本次是我第一次接触开发板嵌入式开发，原因是选修的嵌入式开发的课程要求在期末的时候在龙芯 2K500 的实验箱上部署一个DEMO。本文主要记录了我在部署开发环境时遇到的小坑，回头看其实只是因为不熟悉交叉编译和内核开发闹出的一些小笑话，不过也很有纪念意义，于是记录下来。\u003c/p\u003e\n\u003cp\u003e接下来简单介绍一下龙芯 2K500:\u003c/p\u003e\n\u003cp\u003e龙芯 2K500 芯片是一款基于 LoongArch64 架构的处理器，专为嵌入式应用设计。该 CPU 采用单核设计，拥有单个 LA264 处理器核心，主频范围在 500MHz 到800MHz 之间。CPU 缓存配置方面拥有 32KB 一级指令缓存、32KB 一级数据缓存、512KB 通用二级缓存。CPU 中内置 2D GPU 图形核心，支持 DVO 显示接口。\u003c/p\u003e\n\u003cp\u003e在系统软件支持上，龙芯 2K500 运行 U-Boot 2022 和 Linux 5.10 内核，并兼容 Buildroot 2021 和 OpenHarmony 3.2 文件系统。\u003c/p\u003e\n\u003cp\u003e从官网上来看，这款芯片主要是用于网关、物联网数据终端等设备。确实是一款嵌入式芯片。\u003c/p\u003e\n\u003ch2 id=\"2-踩坑记录\"\u003e2. 踩坑记录\u003c/h2\u003e\n\u003ch3 id=\"21-缺失内核源码\"\u003e2.1 缺失内核源码\u003c/h3\u003e\n\u003cp\u003e刚上手时，我甚至不知道交叉编译驱动还需要内核源码，在我简单的设置好 Loongarch 的 gcc 编译器以后，我就开始直接编译驱动了。在编译内核模块的目录里，我把Makefile 中的KDIR的含义理解为我当前要编译的驱动源码所在的的路径。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-makefile\" data-lang=\"makefile\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eobj-m\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003ech422g.o\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003eKDIR\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e/home/chenzheng/loongarch/mod\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nf\"\u003eall\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    make -C \u003cspan class=\"k\"\u003e$(\u003c/span\u003eKDIR\u003cspan class=\"k\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003eM\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ePWD\u003cspan class=\"k\"\u003e)\u003c/span\u003e modules\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nf\"\u003eclean\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    make -C \u003cspan class=\"k\"\u003e$(\u003c/span\u003eKDIR\u003cspan class=\"k\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003eM\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ePWD\u003cspan class=\"k\"\u003e)\u003c/span\u003e modules clean\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e显而易见，这是错误的，我应该把KDIR指向板子上的内核源码路径。所以我需要下载板子上的内核源码，然后交叉编译驱动。\u003c/p\u003e","title":"从零开始的Loongson 2K500开发环境踩坑"},{"content":"This is my first post, I will write some markdown syntax here to show how it looks like. Most of the content below is copied from PaperMod\u0026rsquo;s Demo.\nParagraph 滚滚长江东逝水，浪花淘尽英雄。\n是非成败转头空。青山依旧在，几度夕阳红。\n白发渔樵江渚上，惯看秋月春风。\n一壶浊酒喜相逢。古今多少事，都付笑谈中。\n——调寄《临江仙》斋\n话说天下大势，分久必合，合久必分。周末七国分争，并入于秦。及秦灭之后，楚、汉分争，又并入于汉。汉朝自高祖斩白蛇而起义，一统天下，后来光武中兴，传至献帝，遂分为三国。推其致乱之由，殆始于桓、灵二帝。桓帝禁锢善类，崇信宦官。及桓帝崩，灵帝即位，大将军窦武、太傅陈蕃，共相辅佐。时有宦官曹节等弄权，窦武、陈蕃谋诛之，机事不密，反为所害，中涓自此愈横。\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested Unordered list Fruit Apple Orange Banana Dairy Milk Cheese Nested Ordered list Fruit Apple Orange Banana Dairy Milk Cheese Third item Sub One Sub Two Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nSummary This is a summary.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://cipeizheng.github.io/posts/my-first-post/","summary":"\u003cp\u003eThis is my first post, I will write some markdown syntax here to show how it looks like. Most of the content below is copied from \u003ca href=\"https://github.com/adityatelange/hugo-PaperMod/tree/exampleSite\"\u003ePaperMod\u0026rsquo;s Demo\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"paragraph\"\u003eParagraph\u003c/h2\u003e\n\u003cp\u003e滚滚长江东逝水，浪花淘尽英雄。\u003c/p\u003e\n\u003cp\u003e是非成败转头空。青山依旧在，几度夕阳红。\u003c/p\u003e\n\u003cp\u003e白发渔樵江渚上，惯看秋月春风。\u003c/p\u003e\n\u003cp\u003e一壶浊酒喜相逢。古今多少事，都付笑谈中。\u003c/p\u003e\n\u003cp\u003e——调寄《临江仙》斋\u003c/p\u003e\n\u003cp\u003e话说天下大势，分久必合，合久必分。周末七国分争，并入于秦。及秦灭之后，楚、汉分争，又并入于汉。汉朝自高祖斩白蛇而起义，一统天下，后来光武中兴，传至献帝，遂分为三国。推其致乱之由，殆始于桓、灵二帝。桓帝禁锢善类，崇信宦官。及桓帝崩，灵帝即位，大将军窦武、太傅陈蕃，共相辅佐。时有宦官曹节等弄权，窦武、陈蕃谋诛之，机事不密，反为所害，中涓自此愈横。\u003c/p\u003e\n\u003ch2 id=\"blockquotes\"\u003eBlockquotes\u003c/h2\u003e\n\u003cp\u003eThe blockquote element represents content that is quoted from another source, optionally with a citation which must be within a \u003ccode\u003efooter\u003c/code\u003e or \u003ccode\u003ecite\u003c/code\u003e element, and optionally with in-line changes such as annotations and abbreviations.\u003c/p\u003e\n\u003ch3 id=\"blockquote-without-attribution\"\u003eBlockquote without attribution\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTiam, ad mint andaepu dandae nostion secatur sequo quae.\n\u003cstrong\u003eNote\u003c/strong\u003e that you can use \u003cem\u003eMarkdown syntax\u003c/em\u003e within a blockquote.\u003c/p\u003e","title":"My 1st post"}]